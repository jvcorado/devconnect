generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followedBy    Follow[]  @relation("FollowedBy")
  following     Follow[]  @relation("Following")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         Int      @id @default(autoincrement())
  user_id    String
  content    String
  image_url  String
  likes      Int      @default(0)
  shares     Int      @default(0)
  created_at DateTime @default(now())

  user      User      @relation(fields: [user_id], references: [id])
  comments  Comment[]
  likesList Like[]

  @@map("posts")
}

model Comment {
  id         Int      @id @default(autoincrement())
  user_id    String
  post_id    Int
  content    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}

model Like {
  id      Int    @id @default(autoincrement())
  user_id String
  post_id Int

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  created_at  DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("FollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
